{
type Name = String
}
type Declarations          = [Declaration]
type Exprs                 = [Expr]
type FuncArgDecls          = [FuncArgDecl]
type ModuleAttributes      = [ModuleAttribute]
type ModuleOptions         = [ModuleOption]
type Names                 = [Name]
type StmtTypeDecls         = [StmtTypeDecl]
type Stmts                 = [Stmt]
type UserTypeDeclFields    = [UserTypeDeclField]
type WithAssignments       = [WithAssignment]

data ModuleAttribute
  | ModuleAttribute name :: Name
                    lit :: Lit

data ModuleOption
  | OptionExplicit

data Module
     | Mod     attributes :: ModuleAttributes
               options    :: ModuleOptions
               decls      :: Declarations

data Declaration
  | DllFunc         visibility :: Visibility
                    name       :: Name
                    library    :: String
                    args       :: FuncArgDecls
                    ty         :: TypeRef

  | UserTypeDecl    visibility :: Visibility
                    name       :: Name
                    typedecls  :: UserTypeDeclFields

  | GlobalVarDecl   visibility :: Visibility
                    name       :: Name
                    ty         :: TypeRef

  | FuncDecl        visibility :: Visibility
                    name       :: Name
                    args       :: FuncArgDecls
                    ty         :: TypeRef
                    statements :: Stmts

  | SubDecl         visibility :: Visibility
                    name       :: Name
                    args       :: FuncArgDecls
                    statements :: Stmts

data Visibility
  | Public
  | Private

data FuncArgDecl
  | ByVal       ty :: FuncArgDeclField
  | ByRef       ty :: FuncArgDeclField
  | Unspecified ty :: FuncArgDeclField

data FuncArgDeclField
  | FuncArgDeclField              name   :: Name
                                  ty     :: TypeRef
  | FuncArgDeclFieldArray         name   :: Name
                                  ty     :: TypeRef

data UserTypeDeclField
  | UserTypeDeclField              name   :: Name
                                   ty     :: TypeRef
  | UserTypeDeclFieldArray         name   :: Name
                                   ty     :: TypeRef
  | UserTypeDeclFieldArrayWithUpperBound    name   :: Name
                                            ubound :: Int
                                            ty     :: TypeRef

data StmtTypeDecl
  | StmtTypeDecl                       name   :: Name
                                       ty     :: TypeRef
  | StmtTypeDeclArray                  name   :: Name
                                       ty     :: TypeRef
  | StmtTypeDeclArrayWithUpperBound    name   :: Name
                                       ubound :: Int
                                       ty     :: TypeRef
  | StmtTypeDeclArrayWithBounds        name   :: Name
                                       lbound :: Int
                                       ubound :: Int
                                       ty     :: TypeRef

data TypeRef
  | TDouble
  | TInt
  | TBoolean
  | TString
  | TUDT     name :: Name


data WithAssignment
  | WithAssignment  left :: Lhs
                    expr :: Expr

data Stmt
  | StmtDecl             typedecls :: StmtTypeDecls
  | StmtReturn
  | StmtWith             left :: Lhs
                         withs :: WithAssignments
  | StmtAssign           left :: Lhs
                         expr :: Expr
  | StmtSetAssign        left :: Lhs
                         expr :: Expr
  | StmtLSetAssign       left :: Lhs
                         expr :: Expr
  | StmtNakedFunctionCall     left :: Lhs
                              exprs :: Exprs
  | StmtIfThenElse       expr :: Expr
                         truestatements :: Stmts
                         falsestatements :: Stmts
  | StmtFor              name :: Name
                         from :: Expr
                         to :: Expr
                         step :: (Maybe Expr)
                         statements :: Stmts
  | StmtDoStatementsLoopWhileCond  statements :: Stmts
                                   condition :: Expr

data Lhs
  | NameLhs    name :: Name -- just a variable
  | FieldLhs   name :: Name
               left :: Lhs -- a.b.c = ..
  | ArrayLhs   name :: Name
               index :: Int -- a[0] = 3

data Expr
  | ELit       lit :: Lit
  | EVar       name :: Name
  | ECall      left :: Lhs
               exprs :: Exprs
  | EAccess    names :: Names -- a.b.c
  | EOp        binop :: Binop
               e1 :: Expr
               e2 :: Expr
  | ENeg       expr :: Expr

data Lit
  | LInt       val :: Int
  | LBool      val :: Bool
  | LString    val :: String
  | LDouble    val :: Double

data Binop | Add | Sub | Mul | Div | Eql
           | GrT | LTh | GEQ | LEQ | And | Or

{
deriving instance Eq Binop
deriving instance Eq Declaration
deriving instance Eq Expr
deriving instance Eq FuncArgDecl
deriving instance Eq FuncArgDeclField
deriving instance Eq Lhs
deriving instance Eq Lit
deriving instance Eq Module
deriving instance Eq ModuleAttribute
deriving instance Eq ModuleOption
deriving instance Eq Stmt
deriving instance Eq StmtTypeDecl
deriving instance Eq TypeRef
deriving instance Eq UserTypeDeclField
deriving instance Eq Visibility
deriving instance Eq WithAssignment
deriving instance Show Binop
deriving instance Show Declaration
deriving instance Show Expr
deriving instance Show FuncArgDecl
deriving instance Show FuncArgDeclField
deriving instance Show Lhs
deriving instance Show Lit
deriving instance Show Module
deriving instance Show ModuleAttribute
deriving instance Show ModuleOption
deriving instance Show Stmt
deriving instance Show StmtTypeDecl
deriving instance Show TypeRef
deriving instance Show UserTypeDeclField
deriving instance Show Visibility
deriving instance Show WithAssignment
}
