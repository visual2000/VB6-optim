attr Declarations Declaration Stmts Stmt Exprs MExpr Expr Lhss Lhs
  inh signatures :: {[(Name, TypeRef)]}
  inh sub_signatures :: {[Name]}

attr Module Declarations Declaration
  syn collect_signatures use {++} {[]} :: {[(Name, TypeRef)]}
  syn collect_sub_names  use {++} {[]} :: {[Name]}

attr Declarations Declaration Stmts Stmt Exprs MExpr Expr
  syn dim_callsites use {++} {[]} :: {[Declaration]}

attr Module Declarations Declaration Stmts Stmt Exprs MExpr Expr Lhss Lhs
  chn counter :: Int

sem Declaration
  | FuncDecl      lhs.collect_signatures = [(@name, @ty.self)]
  | SubDecl       lhs.collect_sub_names  = [@name]

sem Module
  | Mod decls.signatures = @decls.collect_signatures
  | Mod decls.sub_signatures = @decls.collect_sub_names

sem Expr
  | ECall lhs.dim_callsites = callSiteDecl @left.self @loc.return_name @lhs.signatures ++ @exprs.dim_callsites
          loc.num :: uniqueref counter
          loc.return_name = returnName @left.self @loc.num

attr Module ModuleAttributes ModuleOptions ModuleAttribute ModuleOption Visibility FuncArgDecls FuncArgDecl FuncArgDeclField TypeRef UserTypeDeclFields UserTypeDeclField GlobalTypeDecl Declarations Declaration Lit
  syn with_initialising :: self

sem Module
  | Mod lhs.with_initialising = Mod @attributes.self
                                    @options.self
                                    (@decls.dim_callsites
                                     ++ @decls.with_initialising)

attr Stmts
  syn with_initialising use {++} {[]} :: Stmts

attr Stmt
  syn with_initialising :: Stmts

sem Stmt
  | StmtAssign     lhs.with_initialising =
     @expr.initialise_please ++ [StmtAssign @left.self @expr.with_initialising]
  | StmtDecl       lhs.with_initialising = [@self]
  | StmtReturn     lhs.with_initialising = [@self]
  | StmtSetAssign  lhs.with_initialising =
     @expr.initialise_please
       ++ [StmtSetAssign @left.self @expr.with_initialising]
  | StmtLSetAssign lhs.with_initialising =
     @expr.initialise_please
       ++ [StmtLSetAssign @left.self @expr.with_initialising]
  | StmtCall       lhs.with_initialising = @exprs.initialise_please
                                             ++ if isOurFunction @left.self @lhs.signatures
                                                   || isOurSub @left.self @lhs.sub_signatures then
                                                                       @loc.set_args ++
                                                                       [StmtCall @left.self []]
                                                                     else
                                                                       [StmtCall @left.self @exprs.with_initialising]
                   loc.set_args       = if isOurSub @left.self @lhs.sub_signatures then
                                          zipWith (\ e n -> StmtAssign (ArrayLhs (argumentName @left.self n) [EOp Add (EVar (recDepthName @left.self)) (ELit (LInt 1))]) e) @exprs.with_initialising [0..]
                                        else
                                          []
  | StmtIfThenElse lhs.with_initialising =
     @expr.initialise_please
       ++ [StmtIfThenElse @expr.with_initialising
                          @truestatements.with_initialising
                          @falsestatements.with_initialising]
  | StmtFor        lhs.with_initialising =
        @from.initialise_please
          ++ @to.initialise_please
          ++ @step.initialise_please
          ++ [StmtFor @counter.self
                      @from.with_initialising
                      @to.with_initialising
                      @step.with_initialising
                      @statements.with_initialising]
  | StmtDoStatementsLoopWhileCond
                   lhs.with_initialising =
     [StmtDoStatementsLoopWhileCond
        (@statements.with_initialising
         ++ @condition.initialise_please)
        @condition.self]

attr Exprs MExpr Expr
  syn initialise_please use {++} {[]} :: Stmts

attr Exprs MExpr Expr Lhss Lhs Binop
  syn with_initialising :: self

sem Expr
  | ECall lhs.initialise_please = @exprs.initialise_please ++ @loc.set_args ++ @loc.preassign_stmt
          loc.set_args       = if isOurFunction @left.self @lhs.signatures then
                                 zipWith (\ e n -> StmtAssign (ArrayLhs (argumentName @left.self n) [EOp Add (EVar (recDepthName @left.self)) (ELit (LInt 1))]) e) @exprs.with_initialising [0..]
                               else
                                 []
          loc.preassign_stmt = if isOurFunction @left.self @lhs.signatures then
                                 [StmtAssign (NameLhs @loc.return_name) (ECall @left.self [])]
                               else
                                 []
  | ECall lhs.with_initialising = if isOurFunction @left.self @lhs.signatures then
                                    EVar @loc.return_name
                                  else
                                    @self

{
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

isOurSub :: Lhs -> [Name] -> Bool
isOurSub (NameLhs nm) fs            = elem nm fs
isOurSub (FieldLhs [NameLhs nm]) fs = elem nm fs
isOurSub (FieldLhs lhss) fs    = False
isOurSub (ArrayLhs nm idxs) fs = False

isOurFunction :: Lhs -> [(Name, TypeRef)] -> Bool
isOurFunction (NameLhs nm) fs            = case lookup nm fs of
                                                        Nothing -> False
                                                        Just ty -> True
isOurFunction (FieldLhs [NameLhs nm]) fs = case lookup nm fs of
                                                        Nothing -> False
                                                        Just ty -> True
isOurFunction (FieldLhs lhss) fs    = False
isOurFunction (ArrayLhs nm idxs) fs = False

functionName :: Lhs -> Name
functionName (NameLhs nm)            = nm
functionName (FieldLhs [NameLhs nm]) = nm
functionName (FieldLhs lhss)         = "" -- oops.
functionName (ArrayLhs nm idxs)      = error "Array function call not supported"

argumentName :: Lhs -> Int -> Name
argumentName lhs num = "arg_" ++ functionName lhs ++ "_" ++ show num

returnName :: Lhs -> Int -> Name
returnName lhs num = "return_" ++ functionName lhs ++ "_" ++ show num

recDepthName :: Lhs -> Name
recDepthName lhs = "rec_depth_" ++ functionName lhs

callSiteDecl :: Lhs -> Name -> [(Name, TypeRef)] -> [Declaration]
callSiteDecl (NameLhs nm) return_name fs        =
                                         case lookup nm fs of
                                                        Nothing -> []
                                                        Just ty  -> [GlobalVarDecl Private $ GlobalTypeDecl return_name ty]
callSiteDecl (FieldLhs [NameLhs nm]) return_name fs =
                                         case lookup nm fs of
                                                        Nothing -> []
                                                        Just ty  -> [GlobalVarDecl Private $ GlobalTypeDecl return_name ty]
callSiteDecl (FieldLhs lhss) return_name fs    = []
callSiteDecl (ArrayLhs nm idxs) return_name fs = error "Array function call not supported"
}
