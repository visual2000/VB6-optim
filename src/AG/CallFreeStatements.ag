attr Declarations Declaration Stmts Stmt Exprs MExpr Expr Lhss Lhs
  inh signatures :: {[(Name, TypeRef)]}

attr Module Declarations Declaration
  syn collect_signatures use {++} {[]} :: {[(Name, TypeRef)]}

attr Declarations Declaration Stmts Stmt Exprs MExpr Expr
  syn dim_callsites use {++} {[]} :: {[Declaration]}

attr Module Declarations Declaration Stmts Stmt Exprs MExpr Expr Lhss Lhs
  chn counter :: Int

sem Declaration
  | FuncDecl      lhs.collect_signatures = [(@name, @ty.self)]

sem Module
  | Mod decls.signatures = @decls.collect_signatures

sem Expr
  | ECall lhs.dim_callsites = callSiteDecl @left.self @loc.return_name @lhs.signatures ++ @exprs.dim_callsites
          loc.num :: uniqueref counter
          loc.return_name = returnName @left.self @loc.num

attr Module ModuleAttributes ModuleOptions ModuleAttribute ModuleOption Visibility FuncArgDecls FuncArgDecl FuncArgDeclField TypeRef UserTypeDeclFields UserTypeDeclField GlobalTypeDecl Declarations Declaration Lit
  syn with_initialising :: self

sem Module
  | Mod lhs.with_initialising = Mod @attributes.self
                                    @options.self
                                    (@decls.dim_callsites
                                     ++ @decls.with_initialising)

attr Stmts
  syn with_initialising use {++} {[]} :: Stmts

attr Stmt
  syn with_initialising :: Stmts

-- TODO unpack and recurse into all constructors here:
sem Stmt
  | StmtAssign     lhs.with_initialising =
     @expr.initialise_please ++ [StmtAssign @left.self @expr.with_initialising]
  | StmtDecl       lhs.with_initialising = [@self]
  | StmtReturn     lhs.with_initialising = [@self]
  | StmtSetAssign  lhs.with_initialising =
     @expr.initialise_please ++ [@self]
  | StmtLSetAssign lhs.with_initialising =
     @expr.initialise_please ++ [@self]
  | StmtCall       lhs.with_initialising =
     @exprs.initialise_please ++ [@self]
  | StmtIfThenElse lhs.with_initialising =
     @expr.initialise_please ++ [@self]
  | StmtFor        lhs.with_initialising =
        @from.initialise_please
          ++ @to.initialise_please
          ++ @step.initialise_please
          ++ [@self]
  | StmtDoStatementsLoopWhileCond
                   lhs.with_initialising =
     [StmtDoStatementsLoopWhileCond
        (@statements.self
         ++ @condition.initialise_please)
        @condition.self]

attr Exprs MExpr Expr
  syn initialise_please use {++} {[]} :: Stmts

attr Exprs MExpr Expr Lhss Lhs Binop
  syn with_initialising :: self

-- TODO don't replace for functions we don't know about.
sem Expr
  | ECall lhs.initialise_please = @exprs.initialise_please ++ [StmtAssign (NameLhs @loc.return_name) (ECall @left.self @exprs.with_initialising)]
  | ECall lhs.with_initialising = EVar @loc.return_name

{
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

returnName :: Lhs -> Int -> Name
returnName (NameLhs nm)            num = "return_" ++ nm ++ "_" ++ show num
returnName (FieldLhs [NameLhs nm]) num = "return_" ++ nm ++ "_" ++ show num
returnName (FieldLhs lhss)         num = "" -- oops.
returnName (ArrayLhs nm idxs)      num = error "Array function call not supported"

callSiteDecl :: Lhs -> Name -> [(Name, TypeRef)] -> [Declaration]
callSiteDecl (NameLhs nm) return_name fs        =
                                         case lookup nm fs of
                                                        Nothing -> []
                                                        Just ty  -> [GlobalVarDecl Private $ GlobalTypeDecl return_name ty]
callSiteDecl (FieldLhs [NameLhs nm]) return_name fs =
                                         case lookup nm fs of
                                                        Nothing -> []
                                                        Just ty  -> [GlobalVarDecl Private $ GlobalTypeDecl return_name ty]
callSiteDecl (FieldLhs lhss) return_name fs    = []
callSiteDecl (ArrayLhs nm idxs) return_name fs = error "Array function call not supported"
}
