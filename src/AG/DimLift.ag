attr FuncArgDecls FuncArgDecl FuncArgDeclField Stmts Stmt StmtTypeDecls StmtTypeDecl
  inh defining_function :: Name

attr Stmts Stmt Lhss Lhs Exprs MExpr Expr Binop
  inh list_of_replacements :: {[(Name, Name)]}
  inh my_recursion_counter :: String

attr Lhss Lhs Exprs MExpr Expr Binop Lit
  syn copy :: self

sem Declaration
  | DllFunc  args.defining_function = @name
             args.argument_counter = 0
  | SubDecl  statements.defining_function = @name
             args.defining_function = @name
             args.argument_counter = 0
             statements.list_of_replacements = map extractNameReplacements @lhs.all_local_dims
             loc.my_recursion_counter = "rec_depth_" ++ @name
             statements.my_recursion_counter = @loc.my_recursion_counter
  | FuncDecl statements.defining_function = @name
             args.defining_function = @name
             args.argument_counter = 0
             statements.list_of_replacements = map extractNameReplacements @lhs.all_local_dims
             loc.my_recursion_counter = "rec_depth_" ++ @name
             statements.my_recursion_counter = @loc.my_recursion_counter

{
extractNameReplacements :: (StmtTypeDecl, Name) -> (Name, Name)
extractNameReplacements (from, to) = (getName from, to)
}

attr Module Declarations Declaration Stmts Stmt
  -- at the top level we're interested in a mapping from old, local
  -- variable names, to new, globally-unique names.
  syn dims use {++} {[]} :: {[(StmtTypeDecl, Name)]}

attr Declaration
  inh all_local_dims :: {[(StmtTypeDecl, Name)]}

sem Declarations
  | Cons hd.all_local_dims = @hd.dims

attr FuncArgDecls
  chn argument_counter :: Int

attr FuncArgDecl FuncArgDeclField
  inh argument_counter :: Int

sem FuncArgDecls
  | Cons hd.argument_counter = @loc.num
         loc.num :: uniqueref argument_counter

sem FuncArgDeclField
  | FuncArgDeclField lhs.dims = (StmtTypeDecl @name @ty.self, "arg_" ++ @lhs.defining_function ++ "_" ++ show @lhs.argument_counter)
  | FuncArgDeclFieldArray lhs.dims = error "Array arguments are not yet implemented"

attr StmtTypeDecl FuncArgDecl FuncArgDeclField
  -- the `name' field is a new name.
  syn dims :: { (StmtTypeDecl, Name) }

sem StmtTypeDecls FuncArgDecls
  syn dims use {:} {[]} :: {[(StmtTypeDecl, Name)]}

sem StmtTypeDecl
  | StmtTypeDecl lhs.dims                    = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArray lhs.dims               = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArrayWithUpperBound lhs.dims = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArrayWithBounds lhs.dims     = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)

attr Module ModuleAttributes ModuleOptions ModuleAttribute ModuleOption
  syn dim_lifted :: self
attr Declarations
  syn dim_lifted :: self
attr Declaration Visibility FuncArgDecls FuncArgDecl FuncArgDeclField TypeRef UserTypeDeclFields UserTypeDeclField GlobalTypeDecl
  syn dim_lifted :: self

attr Stmt
  syn dim_lifted :: Stmts -- because we want to be able to add & remove

attr Stmts
  syn dim_lifted use {++} {[]} :: Stmts

attr Lhss Lhs Exprs MExpr Expr Lit Binop
  syn dim_lifted :: self

attr Declarations Declaration
  syn rec_counters use {++} {[]} :: Declarations

sem Module
  | Mod lhs.dim_lifted = Mod @attributes.dim_lifted
                             @options.dim_lifted
                             (globalisedDecls @decls.dims
                              ++ @decls.rec_counters
                              ++ @decls.dim_lifted)

{
globalisedDecls :: [(StmtTypeDecl, Name)] -> [Declaration]
globalisedDecls [] = []
globalisedDecls ((StmtTypeDecl n t, nn):rs) =
  (GlobalVarDecl Private (GlobalTypeDeclArrayWithBounds nn 0 100 t)):globalisedDecls rs
globalisedDecls ((StmtTypeDeclArray n t, nn):rs) = error "Please don't use arrays in function scope."
globalisedDecls ((StmtTypeDeclArrayWithUpperBound n u t, nn):rs) = error "Please don't use arrays in function scope."
globalisedDecls ((StmtTypeDeclArrayWithBounds n l u t, nn):rs) = error "Please don't use arrays in function scope."
}

sem Declaration
  | FuncDecl lhs.rec_counters = [GlobalVarDecl Private $ GlobalTypeDecl @loc.my_recursion_counter TInt]
  | SubDecl  lhs.rec_counters = [GlobalVarDecl Private $ GlobalTypeDecl @loc.my_recursion_counter TInt]

sem Declaration
  | FuncDecl lhs.dim_lifted = FuncDecl @visibility.self
                                       @name
                                       [] -- we do this differently now!
                                       @ty.self
                                    $
                              [StmtAssign (NameLhs @loc.my_recursion_counter) (EOp Add (EVar @loc.my_recursion_counter) (ELit (LInt 1)))
                              ,StmtIfThenElse (EOp GrT (EVar @loc.my_recursion_counter) (ELit (LInt 100)))
                                              [ StmtAssign (NameLhs @loc.my_recursion_counter) (EOp Sub (EVar @loc.my_recursion_counter) (ELit (LInt 1)))
                                              , StmtReturn]
                                              []
                              ]
                              ++ @statements.dim_lifted
  | SubDecl  lhs.dim_lifted = SubDecl @visibility.self
                                      @name
                                      [] -- we do this differently now!
                                      @statements.dim_lifted

sem Stmt
  | StmtDecl lhs.dim_lifted = []
  | StmtReturn lhs.dim_lifted = [StmtAssign (NameLhs @lhs.my_recursion_counter) (EOp Sub (EVar @lhs.my_recursion_counter) (ELit (LInt 1))),
                                 @self]
  | StmtAssign lhs.dim_lifted = [StmtAssign @left.dim_lifted @expr.dim_lifted]
  | StmtSetAssign lhs.dim_lifted = [StmtSetAssign @left.dim_lifted @expr.dim_lifted]
  | StmtLSetAssign lhs.dim_lifted = [StmtLSetAssign @left.dim_lifted @expr.dim_lifted]
  | StmtCall lhs.dim_lifted = [StmtCall @left.dim_lifted @exprs.dim_lifted]
  | StmtIfThenElse lhs.dim_lifted = [StmtIfThenElse @expr.dim_lifted @truestatements.dim_lifted @falsestatements.dim_lifted]
  | StmtFor lhs.dim_lifted = [StmtFor @counter.dim_lifted @from.dim_lifted @to.dim_lifted @step.dim_lifted @statements.dim_lifted]
  | StmtDoStatementsLoopWhileCond lhs.dim_lifted = [StmtDoStatementsLoopWhileCond @statements.dim_lifted @condition.dim_lifted]

sem Exprs Lhss
  | Cons lhs.dim_lifted = @hd.dim_lifted : @tl.dim_lifted

sem Lhs
  | NameLhs lhs.dim_lifted  = handleNameLhs @lhs.list_of_replacements @lhs.my_recursion_counter @name
  | FieldLhs lhs.dim_lifted = FieldLhs @left.dim_lifted
  | ArrayLhs lhs.dim_lifted = handleArrayLhs @lhs.list_of_replacements @lhs.my_recursion_counter @name @index.dim_lifted

sem Expr
  | EVar lhs.dim_lifted = handleEVar @lhs.list_of_replacements @lhs.my_recursion_counter @name
  | ECall lhs.dim_lifted = ECall @left.dim_lifted @exprs.dim_lifted
  | EAccess lhs.dim_lifted = EAccess @names.dim_lifted
  | EOp lhs.dim_lifted = EOp @binop.dim_lifted @e1.dim_lifted @e2.dim_lifted
  | ENeg lhs.dim_lifted = ENeg @expr.dim_lifted

{
handleArrayLhs :: [(Name, Name)] -> Name -> Name -> [Expr] -> Lhs
handleArrayLhs reps recursion_counter name exprs =
  case lookup name reps of
    Just rep -> ArrayLhs rep ((EVar recursion_counter) : exprs)
    Nothing  -> ArrayLhs name exprs

handleNameLhs :: [(Name, Name)] -> Name -> Name -> Lhs
handleNameLhs reps recursion_counter name =
  case lookup name reps of
    Just rep -> ArrayLhs rep [EVar recursion_counter]
    Nothing  -> NameLhs name

handleEVar :: [(Name, Name)] -> Name -> Name -> Expr
handleEVar reps recursion_counter name =
  case lookup name reps of
    Just rep -> ECall (NameLhs rep) [EVar recursion_counter]
    Nothing  -> EVar name
}
