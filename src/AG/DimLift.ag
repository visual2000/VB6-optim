attr Module Declarations Declaration Stmts Stmt
  -- at the top level we're interested in a mapping from old, local
  -- variable names, to new, globally-unique names.
  syn dims use {++} {[]} :: {[(StmtTypeDecl, Name)]}

attr StmtTypeDecl
  -- the `name' field is a new name.
  syn dims :: { (StmtTypeDecl, Name) }

sem StmtTypeDecls
  syn dims use {:} {[]} :: {[(StmtTypeDecl, Name)]}

attr Stmts Stmt StmtTypeDecls StmtTypeDecl
  inh defining_function :: Name

sem Declaration
  | SubDecl  statements.defining_function = @name
  | FuncDecl statements.defining_function = @name

sem StmtTypeDecl
  | StmtTypeDecl lhs.dims                    = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArray lhs.dims               = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArrayWithUpperBound lhs.dims = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
  | StmtTypeDeclArrayWithBounds lhs.dims     = (@self, "dim_" ++ @lhs.defining_function ++ "_" ++ @name)
